Choosing A Specialty (part 1)
There's a lot of information out there concerning what tools to use for a given task
and how to use different technologies, and considering how many technologies are not
only available on a constant basis, but how many new, popular technologies regularly
sprout fresh from the technology garden, it can be hard (particularly for those
who are relatively new to the field) to decide what technologies to learn or deepen
one's knowledge of. As someone who has experimented with not only several different
technologies, but several different types of technologies, I am deeply aware of this struggle.
I'm sure many people make this decision passively based on whatever they start
doing at the outset of their careers, and I suppose if all you care about is
being employed, this approach is completely legitimate. Otherwise, however, the
choosing process is necessary.

A fully encompassing approach to choosing one's specialty technologies must be multi-tiered.
First and foremost, it should be emphasized that a well-rounded knowledge of many technologies
is generally helpful. A laser focus on very few technologies to the exclusion
of all others can be harmful, however much of an expert one may become in their selections.
That being said, somewhat of a concentration on a handful of technologies is usually necessary
in order to develop the knowledge-base required for any particular field.

The first step in picking a specialty is considering the options, of which there are an
overwhelming number in the tech world at large, and still more than a few even when the
field is narrowed just to, say, software development, although the latter number is
much more approachable. We will therefore deal only with the options within software
development/engineering, and the process can be extrapolated from there to other
areas of not only technology, but any collection of interrelated fields.

"Consider the options" being a somewhat obvious step, let's elaborate on what this entails,
i.e. what exactly is being considered. When it comes to different areas of software
development, there are two main factors at play. 1) What is this type of developer
expected to do for their job? 2) What is expected of this type of developer coming into the job?
The latter can further be broken down into three aspects: knowledge, experience, and ability.
In considering these factors, it is incumbent upon the chooser to ask themself questions:

1) Do I want to do what this job would expect/require me to do?

and the followup to the affirmative, 2) Do I have what is expected of someone coming into this job?

and the followup to the negative, 3) Can I and am I prepared to acquire what is expected?

It should be fairly straightforward through this process to shoot down possibilities.
The question that remains, however, which is a prerequisite for answering question (2), is
"Do I know what is expected of someone coming into this job?" This question in particular,
far more than the unmentioned "Do I know what this job would expect me to do?" (since
that's usually in job descriptions), can be hard to answer without a significant amount of
research. The only places that tend to consistently have answers to questions like this
are blogs, which are often not up-to-date, difficult to find, and provide an incomplete picture,
and learning-related companies (with either book or online curricula), which not only
charge to teach you the material that you hopefully need to know, but don't give you
any useful information about what they teach unless you're paying to learn it.

In the information age, one shouldn't need to know exactly what questions to ask to find
what they're looking for. Especially because, often, one only knows what questions to ask
once they already know where to find the answers, if not the answers themselves.
This series hopes to address this problem among others in the overarching process of
choosing a professional specialty.
